plugins {
    id 'fabric-loom' version '0.2.0-SNAPSHOT'
    id 'org.ajoberstar.grgit' version '3.0.0'
    id 'cz.alenkacz.gradle.scalafmt' version '1.7.2'
    id 'scala'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'stockpile'
version = properties.stockpile_version

// This block does some magic to add version information automatically (i.e. Minecraft version metadata, build number,
// current branch). The only things to change manually are editing the version in gradle.properties and specifying
// -Prelease on release builds.

def isRelease = project.hasProperty("release")

if (!isRelease) {
    def currentBranch = grgit.branch.current().name ?: "unknown"
    version += "-$currentBranch"

    def ciBuildNumber = System.getenv("TRAVIS_BUILD_NUMBER")
    if (ciBuildNumber != null) {
        version += ".$ciBuildNumber"
    }
}

version += "+${project.minecraft_version}"

minecraft {
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url 'https://jitpack.io' }
    maven { url "https://maven.jamieswhiteshirt.com/libs-release/" }
}

// For Mixin's annotation processor to work, we need to compile Java and Scala independently. Note the blocks below and
// the added file dependency.

tasks.compileJava.dependsOn compileScala
tasks.compileScala.dependsOn.remove("compileJava")

sourceSets {
    main {
        scala {
            outputDir = file("$buildDir/classes/scala/main")
        }

        java {
            outputDir = file("$buildDir/classes/java/main")
        }
    }
}

dependencies {

    // Fabric toolchain
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    // Mod dependencies
    modCompile "net.fabricmc:fabric:${project.fabric_version}"
    modCompile "net.fabricmc:fabric-language-scala:${project.scala_adapter_version}"

    // Dev environment
    modCompile "com.jamieswhiteshirt:developer-mode:1.0.5"

    // Various Scala kerfluffle
    compile 'org.scala-lang:scala-library:2.12.8'
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    // Unit tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.scalatest:scalatest_2.12:3.0.5'
    testCompile 'org.powermock:powermock-module-junit4:1.7.1'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.1'

    // Mixin workaround
    compile files("$sourceSets.main.scala.outputDir")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

check.dependsOn(checkScalafmtAll)
